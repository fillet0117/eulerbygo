package main

import (
	"fmt"
)

// 題目:
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

func SumEvenInFibonacci(num int) int {
	n1 := 1
	n2 := 2
	n3 := 0
	sum := 2
	for {
		n3 = n1 + n2
		if n3 % 2 == 0 {
			sum += n3
		}
		n1 = n2
		n2 = n3
		if n3 >= num {
			break
		}
	}
	return sum
}
// 費氏數列每三個數就為偶數:
// 1, 1, 2, 3, 5, 8.....
// a, b, c, a, b, c.....
func ThirdNumber(num int) int {
	a := 1
	b := 1
	c := a + b
	sum := 0
	for {
		sum += c
		a = b + c
		b = a + c
		c = a + b
		if c >= num {
			break
		}
	}
	return sum
}

// 將費氏數列的每三個數拿出來看:
// 2, 8, 34, 144......
// E(n) = 4 * E(n-1) + E(n-2)
// 證明:
// F(n) = F(n-1) + F(n-2)
// = F(n-2)+F(n-3)+F(n-2)
// = 2 * F(n-2) + F(n-3)
// = 2 * (F(n-3)+F(n-4))+F(n-3))
// = 3 * F(n-3) + 2 * F(n-4)
// = 3 * F(n-3) + F(n-4) + F(n-5) + F(n-6)
// = 4 * F(n-3) + F(n-6)
func EvenInFibonacci(num int) int {
	n1 := 2
	n2 := 8
	sum := n1 + n2
	n3 := 4 * n2 + n1
	for {
		sum += n3
		n1 = n2
		n2 = n3
		n3 = 4 * n2 + n1
		if n3 >= num {
			break
		}
	}
	return sum
}


func main() {
	sum := SumEvenInFibonacci(4000000)
	fmt.Println(sum)
	sum = ThirdNumber(4000000)
	fmt.Println(sum)
	sum = EvenInFibonacci(4000000)
	fmt.Println(sum)
}